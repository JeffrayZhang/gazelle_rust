package ext

import (
	"flag"
	"io/ioutil"
	"log"
	"path"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

type Extension struct {}
// RegisterFlags registers command-line flags used by the extension. This
// method is called once with the root configuration when Gazelle
// starts. RegisterFlags may set an initial values in Config.Exts. When flags
// are set, they should modify these values.
func (e *Extension) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {}

// CheckFlags validates the configuration after command line flags are parsed.
// This is called once with the root configuration when Gazelle starts.
// CheckFlags may set default values in flags or make implied changes.
func (e *Extension) CheckFlags(fs *flag.FlagSet, c *config.Config) error {
	return nil
}

// KnownDirectives returns a list of directive keys that this Configurer can
// interpret. Gazelle prints errors for directives that are not recoginized by
// any Configurer.
func (e *Extension) KnownDirectives() []string {
	return []string{}
}

// Configure modifies the configuration using directives and other information
// extracted from a build file. Configure is called in each directory.
//
// c is the configuration for the current directory. It starts out as a copy
// of the configuration for the parent directory.
//
// rel is the slash-separated relative path from the repository root to
// the current directory. It is "" for the root directory itself.
//
// f is the build file for the current directory or nil if there is no
// existing build file.
func (e *Extension) Configure(c *config.Config, rel string, f *rule.File) {}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (e *Extension) Name() string {
	return "rust"
}

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (e *Extension) Imports(c *config.Config, r *rule.Rule, f *rule.File) []resolve.ImportSpec {
	// TODO: Implement
	return []resolve.ImportSpec{}
}

// Embeds returns a list of labels of rules that the given rule embeds. If
// a rule is embedded by another importable rule of the same language, only
// the embedding rule will be indexed. The embedding rule will inherit
// the imports of the embedded rule.
func (e *Extension) Embeds(r *rule.Rule, from label.Label) []label.Label {
	return []label.Label{}
}

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each
// rule generated by language.GenerateRules in
// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
// the appropriate language-specific equivalent) for each import according to
// language-specific rules and heuristics.
func (e *Extension) Resolve(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, r *rule.Rule, imports interface{}, from label.Label) {
	// TODO: Implement
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (e *Extension) Kinds() map[string]rule.KindInfo {
	return rustKinds
}

var rustKinds = map[string]rule.KindInfo{
	"rust_binary": {
		MatchAny: true,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"crate_root": true,
			"srcs":       true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
	"rust_library": {
		MatchAny: true,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"srcs":       true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
	"rust_test": {
		MatchAny: false,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"crate_root": true,
			"srcs":       true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
}


// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (e *Extension) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	result := language.GenerateResult{}
	files, err := ioutil.ReadDir(args.Dir)
	if err != nil { log.Fatal(err) }
	for _, file := range files {
		if !strings.HasSuffix(file.Name(), ".rs") {
			continue
		}
		ruleName := strings.Replace(file.Name(), ".rs", "", 1) // main.rs => main
		dir := strings.TrimLeft(strings.Replace(args.Dir, args.Config.RepoRoot, "", 1), "/")
		crateName := strings.ReplaceAll(path.Join(dir, ruleName), "/", "_") // src/app/app => src_app_app

		libRule := rule.NewRule("rust_library", ruleName)
		libRule.SetAttr("srcs", []string{file.Name()})
		libRule.SetAttr("crate_name", crateName)
		libRule.SetAttr("visibility", "//visibility:public")
		result.Gen = append(result.Gen, libRule)
		result.Imports = append(result.Imports, "")
	}
	return result
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
//
// Deprecated: Implement ModuleAwareLanguage's ApparentLoads.
func (e *Extension) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{}
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (e *Extension) Fix(c *config.Config, f *rule.File) {}

func NewLanguage() language.Language {
	return &Extension{}
}
